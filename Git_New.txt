1、常用术语
1）工作区（Working Directory）：含有.git目录的文件夹
2）暂存区（stage或称index）：index文件
3）版本库（Repository）：.git目录
4）指针（HEAD）：HEAD文件
5）.gitignore文件：忽略匹配的文件
6）README.md文件：版本库描述
7）LICENSE文件：许可证
8）Git支持多种协议：HTTP(s)、SSH、Git、本地文件协议等
HTTP(s)协议：https://github.com/wuwensheng1992/Learning-Notes.git
SSH协议：git@github.com:wuwensheng1992/Learning-Notes.git
Subversion协议：https://github.com/wuwensheng1992/Learning-Notes
本地文件协议：git clone D:\Learning-Notes.git
Git协议：

2、安装Git
1）Windows下安装：Use Git from Git Bash only
2）配置全局的名字和邮箱
3）配置换行符

3、命令帮助
git help <command>

4、常用配置 config（--global则为全局，不加则为当前工作区）
1）查看配置：git config [--global] --list
2）配置名字和邮箱
a）名字：git config --global user.name "wuws"
b）邮箱：git config --global user.email "wuwensheng1992@hotmail.com"
3）配置换行符
a）提交时检查换行符：git config --global core.safecrlf true
b）自动转换换行符（LF/CRLF）
Windows下：git config --global core.autocrlf true
Linux/Unix下：git config --global core.autocrlf input
4）配置编辑器（vi、vim、emacs）：git config --global core.editor <editorname>
5）配置不带任何参数的git push的推送方式
a）simple方式（当前分支）：git config --global push.default simple
b）matching方式（推送已关联的所有分支）：git config --global push.default matching
6）配置别名 alias
a）lg别名：git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
b）unstage别名：git config --global alias.unstage "reset head ."
c）unchanges别名：git config --global alias.unchanges "checkout -- ."

5、创建版本库（通常是先在远程仓库创建版本库，然后再从远程仓库克隆到本地）
1）git init
2）裸版本库：git init --bare

6、历史记录查看
1）版本库历史：git log
a）单行显示，commit缩写：git log --pretty=oneline --abbrev-commit
b）本地版本库历史与远程版本库历史的比较：git log -p <local-branchname>..<remotename>/<remote-branchname>
2）提交历史：git reflog

7、查看工作区变化：git status

8、差异比较
1）查看工作区和版本库里面最新版本的区别：git diff HEAD -- <pathspec>[,...]
2）比较本地分支与远程分支的差异：git diff -p <local-branchname>..<remotename>/<remote-branchname>
3）

9、管理修改
1）添加到暂存区：git add <pathspec>[,...]
2）提交到版本库：git commit [-a] [-v] [--amend] [-m <remark>]
3）丢弃工作区的修改：git checkout -- <pathspec>[,...]
4）丢弃暂存区的修改：git reset head <pathspec>[,...]
5）版本回退：git reset --hard <[head^]|[head~1]|[commit]>
6）工作区删除：git rm [-f] <pathspec>[,...]
7）暂存区删除：git rm --cached <pathspec>[,...]

10、分支管理
1）查看分支：git branch [-r] [-a] [-v]
2）创建分支：git branch <name>
3）切换分支：git checkout <name>
4）创建并切换分支：git checkout -b <name>
5）合并分支：git merge <name>
6）删除分支：git branch -d <name>
7）禁用Fast forward模式：git merge --no-ff -m <remark> <name>
8）bug分支：
案例，当前正在开发dev分支，可是有几个bug要处理，暂存工作现场。
a）git stash
b）git checkout master
c）git checkout -b <name>
...
d）git checkout master
e）git merge --no-ff -m <remark> <name>
f）git branch -d <name>
g）git checkout dev
h）git stash list
i）git stash apply <stash>
git stash drop <stash>
#或者
git stash pop <stash>
9）feature分支
案例：你接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
但是，就在此时，接到上级命令，因经费不足，新功能必须取消！
a）强行删除还没有合并的分支：git branch -D <name>
10）分支推送方案
a）master分支是主分支，因此要时刻与远程同步；
b）dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
c）bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
d）feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

11、标签管理
1）创建标签：git tag <tagname> [commit]
2）创建带有说明的标签：git tag -a <tagname> -m <remark> [commit]
3）创建用私钥签名的标签（前提是已安装gpg，即GnuPG，有gpg密钥对）：git tag -s <tagname> -m <remark> [commit]
2）查看标签：git tag
3）标签明细：git show <tagname>
4）删除标签：git tag -d <tagname>
4）实施方案
a）切换到需要打标签的分支。
b）查看版本库历史记录，找到需要打标签的commit。
c）创建标签

12、添加远程库
1）添加远程库：git remote add <name> <url>
2）更名：git remote rename <oldname> <newname>
3）更改地址：git remote set-url <name> <newurl>
4）查看远程库：git remote -v
5）远程库详情：git remote show <name>

13、克隆远程版本库
1）git clone [--bare] [--mirror] [-o <name>] <url>
2）克隆完后本地只有一个主分支，其他分支待创建。
3）创建分支并关联远程分支：git checkout -b <local-branchname> <remotename>/<remote-branchname>
4）关联远程分支：git branch --set-upstream <local-branchname> <remotename>/<remote-branchname>

14、远程库同步
1）SSH Keys
a）采用SSH协议时，因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
b）创建SSH Key秘钥对：ssh-keygen -t rsa -C "wuwensheng1992@hotmail.com"
c）私钥：id_rsa文件
d）公钥：id_rsa.pub文件
e）在GitHub上添加SSH key的公钥
2）指定默认主机（多个主机的情况下）：git push -u <remotename> <local-branchname>:<remote-branchname>
3）推送分支：git push [remotename] [local-branchname]:[remote-branchname]
a）简单推送：git push
a）指定分支：git push <remotename> <local-branchname>
b）所有分支：git push --all <remotename>
c）强行推送：git push --force <remotename>
4）删除分支
git branch -rd <remote-branchname>
#或者
git push origin --delete <remote-branchname>
#或者
git push <remotename> :<remote-branchname>
#或者
git push <remotename> :refs/branches/<remote-branchname>
5）推送标签
a）指定标签：git push <remotename> <tagname>
b）所有标签：git push <remotename> --tags
6）删除标签：git push origin :refs/tags/<tagname>
7）抓取远程更新：（-p 在本地删除远程已经删除的分支）
git fetch [-p|--prune] <remotename> <remote-branchname>
git merge <remotename>/<remote-branchname>
#或者
git pull [-p] <remotename> <remote-branchname>:<local-branchname>
8）合并更新：
