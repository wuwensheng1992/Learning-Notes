1、常用术语、提示
1）工作区（Working Directory）：除.git目录外的其他文件或目录
2）暂存区（stage或称index）：index文件
3）版本库（Repository）：.git目录
4）指针（HEAD）：HEAD文件
5）.gitignore文件：忽略匹配的文件
6）README.md文件：放版本库或项目新人需要了解的所有相关的信息
7）LICENSE文件：许可证
8）Git支持多种协议：本地协议（Local）、HTTP 协议、SSH（Secure Shell）协议及 Git 协议，Git默认使用SSH协议。
a）HTTP(s)协议：https://example.com/gitproject.git
案例：https://github.com/wuwensheng1992/Learning-Notes.git
b）SSH协议：ssh://user@server/project.git
#或者简短的 scp 式的写法：user@server:project.git
案例：git@github.com:wuwensheng1992/Learning-Notes.git
c）Subversion协议：https://github.com/wuwensheng1992/Learning-Notes
d）本地协议：/opt/git/project.git 或 file:///opt/git/project.git
案例：D:\Learning-Notes.git 或 file:///D:\Learning-Notes.git
e）Git协议：git://
9）集中式版本控制系统：CVS、SVN、VSS
10）分布式版本控制系统：Cit
11）<pathname>的值：.标识匹配所有，*.class匹配以.class结尾的文件，文件名，多个文件已逗号分割，--all|-A
12）通常对于公开项目可以优先分享基于 HTTP 的 URL，因为用户克隆项目不需要有一个 GitHub 帐号。 如果你分享 SSH URL，用户必须有一个帐号并且上传 SSH 密钥才能访问你的项目。 HTTP URL 与你贴到浏览器里查看项目用的地址是一样的。
13）不能区分是哪个远程个分支时，或不使用本地分支时，需加上远程主机名：<remotename>/<branchname>


2、安装Git
1）Windows下安装：Use Git from Git Bash only
2）配置全局的名字和邮箱
3）配置换行符


3、命令帮助
git help <command>
#或者
git <command> --help


4、常用配置 config（--global则为全局，不加则为当前Git仓库）
1）查看配置：git config [--global] --list
a）配置明细：git config user.email
2）配置名字和邮箱
a）名字：git config --global user.name "wuws"
b）邮箱：git config --global user.email "wuwensheng1992@hotmail.com"
3）配置换行符
a）提交时检查换行符：git config --global core.safecrlf true
b）自动转换换行符（LF/CRLF）
Windows下：git config --global core.autocrlf true
Linux/Unix下：git config --global core.autocrlf input
4）配置编辑器（vi、vim、emacs）：git config --global core.editor <editorname>
5）配置不带任何参数的git push的推送方式
a）simple方式（推送当前分支）：git config --global push.default simple
b）matching方式（推送已关联的所有分支）：git config --global push.default matching
6）配置别名 alias
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'
git config --global alias.unchanges 'checkout --'
git config --global alias.last 'log -1 HEAD'
7）HTTPS 避免每次输入密码：git config --global credential.helper cache


5、创建版本库（通常是先在远程仓库创建版本库，然后再从远程仓库克隆到本地）
1）在一个空目录下执行：git init
2）裸版本库（没有工作区）：git init --bare


6、版本库历史记录查看
1）显示从最近到最远的提交日志：git log
2）单行、commit缩写显示：git log --pretty=oneline --abbrev-commit
3）树形显示：git log --graph
4）显示最近几次的提交日志：git log -<number>
5）查看类似于 git log 输出格式的引用日志信息：git log -g <branchname>
6）查看A分支中还有哪些提交尚未被合并入B分支：git log <B-branchname>..<A-branchname>
案例：查看你即将推送到远端的提交，git log <remotename>/<remote-branchname>..HEAD
7）查看A分支中还有哪些提交尚未被合并入B分支（加入对修改作比较）：git log -p <B-branchname>..<A-branchname>
案例：查看你即将推送到远端的提交（加入对修改作比较），git log -p <remotename>/<remote-branchname>..<local-branchname>
8）查看A分支或者B分支中包含的但不是两者共有的提交：git log [--left-right] <A-branchname>...<B-branchname>


7、查看仓库当前的状态：git status


8、差异比较
1）查看修改内容（前提是还没暂存）：git diff <pathname>
2）查看工作区、暂存区和版本库里面最新版本的区别：git diff HEAD -- <pathname>
3）查看A分支中还有哪些提交尚未被合并入B分支（对修改作比较）：git diff <B-branchname>..<A-branchname>
案例：查看你即将推送到远端的提交（对修改作比较），git diff <remotename>/<remote-branchname>..<local-branchname>


9、管理修改
1）添加到暂存区：git add <pathname>
2）提交到版本库：git commit [-a] [-v] [-m <remark>]
3）丢弃工作区的修改：git checkout -- <pathname>
4）丢弃暂存区的修改：git reset head <pathname>
5）版本回退：git reset --hard <[head^]|[head~1]|[commit]>
6）工作区删除：git rm [-f] <pathname>
7）暂存区删除：git rm --cached <pathname>
8）移动文件（也可以用来更名）：git mv <old-pathname> <new-pathname>
9）修改上次的提交（补充暂存文件、修改说明）：git commit --amend


10、选择修订版本
1）查看一个分支的最后一次提交的对象：git show <branchname>
2）查看提交详情：git show <commit>
3）某个分支指向哪个特定的 SHA-1：git rev-parse <branchname>
4）看任何一个例子中被简写的 SHA-1 ：git rev-parse <commit>
5）查看引用日志信息（本地仓库）：git reflog
a）查看仓库中 HEAD 最近那次的所指向的提交：
git show HEAD@{number}
#或者（^的个数表示最近那次）
git show HEAD^^^
#或者
git show HEAD~number
b）以某次提交为基准，查看最近那次的提交：
git show <commit>^^^
#或者
git show <commit>~number
c）查看你的 master 分支在昨天的时候指向了哪个提交：git show master@{yesterday}


10、分支管理
1）查看分支：git branch [-r] [-a] [-v]
2）创建分支：git branch <name>
3）切换分支：git checkout <name>
4）创建并切换分支：git checkout -b <name>
5）分支的合并（如果当前分支的指针没有推进，则默认使用Fast forward模式将指针指向目标分支的提交，此时历史记录是并排的；否则需要解决冲突，然后再手动建一个新的提交，此时历史记录会出现分叉）：
git merge <name>
6）删除分支：git branch -d <name>
7）禁用Fast forward模式（当前分支创建新的提交，历史纪录出现分叉）：git merge --no-ff -m <remark> <name>
8）查看已经合并到当前分支的分支：git branch --merged
9）查看灭有合并到当前分支的分支：git branch --no-merged
10）bug分支
案例，当前正在开发dev分支，可是有几个bug要处理，暂存工作现场。
a）git stash
b）git checkout master
c）git checkout -b issue101
...
d）git checkout master
e）git merge --no-ff -m "..." issue101
f）git branch -d issue101
g）git checkout dev
h）git stash list
i）git stash apply <stash>
git stash drop <stash>
#或者
git stash pop <stash>
11）feature分支
案例：你接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。
但是，就在此时，接到上级命令，因经费不足，新功能必须取消！
a）强行删除还没有合并的分支：git branch -D <name>
10）分支推送方案
a）master分支是主分支，因此要时刻与远程同步；
b）dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
c）bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
d）feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。


11、标签管理
1）创建轻量标签：git tag <tagname> [commit]
2）创建附注标签：git tag -a <tagname> -m <remark> [commit]
3）创建私钥签名的标签（前提是已安装gpg，即GnuPG，有gpg密钥对）：git tag -s <tagname> -m <remark> [commit]
2）查看标签：git tag
3）标签明细：git show <tagname>
4）删除标签：git tag -d <tagname>
4）实施方案
a）切换到需要打标签的分支。
b）查看版本库历史记录，找到需要打标签的commit。
c）创建标签


12、远程仓库
1）添加远程仓库：git remote add <name> <url>
2）更名：git remote rename <oldname> <newname>
3）更改地址：git remote set-url <name> <newurl>
4）查看远程仓库：git remote -v
5）远程仓库详情：git remote show <name>
6）移除远程仓库：git remote rm <name>


13、克隆远程仓库
1）克隆为普通仓库（仓库下.git目录为版本库，其他为工作区；默认仓库名为"原仓库名"）：git clone [-o <remotename>] <url> [directory]
2）克隆为裸仓库（没有工作区和.git目录，仓库下即为版本库；默认仓库名为"原仓库名"+".git"）：git clone --bare <url>
3）克隆为裸仓库，fetch命令和上游（upstream）版本库进行持续同步：git clone --mirror <url>
2）克隆完后通常会自动地创建一个跟踪 origin/master 的 master 分支。
3）创建跟踪分支：git checkout -b <local-branchname> <remotename>/<remote-branchname>
#或者（新创建分支的名字同远程分支的名字）
git checkout --track <remotename>/<remote-branchname>
4）设置本地分支跟踪远程分支：git branch --set-upstream <local-branchname> <remotename>/<remote-branchname>
#或者（当前分支）
git branch -u|--set-upstream-to <remotename>/<remote-branchname>
5）查看所有跟踪分支：git branch -vv
6）查看远程引用的完整列表：git ls-remote [name]


14、推送更新
1）SSH Keys
a）采用SSH协议时，因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
b）创建SSH Key秘钥对：ssh-keygen -t rsa -C "wuwensheng1992@hotmail.com"
c）私钥：id_rsa文件
d）公钥：id_rsa.pub文件
e）在GitHub上添加SSH key的公钥
f）本地连接认证：ssh git@github.com，键入yes
2）指定默认主机（多个主机的情况下）：git push -u <remotename> [local-branchname]:[remote-branchname]
3）推送分支：git push [remotename] [local-branchname]:[remote-branchname]
a）简单推送：git push
a）指定分支：git push <remotename> <local-branchname>
b）所有分支：git push --all <remotename>
c）强行推送（远程仓库的版本更新）：git push --force <remotename>
4）删除分支
git push origin --delete <remote-branchname>
#或者
git push <remotename> :<remote-branchname>
#或者
git branch -rd <remote-branchname>
#或者
git push <remotename> :refs/branches/<remote-branchname>
5）推送标签
a）指定标签：git push <remotename> <tagname>
b）所有标签：git push <remotename> --tags
6）删除标签：git push origin :refs/tags/<tagname>


15、拉取更新
1）指定远程分支
git fetch [-p|--prune] <remotename> <remote-branchname>（-p 在本地删除远程已经删除的分支）
git log -p <local-branchname>..<remotename>/<remote-branchname>（-p查看更新了哪些内容）
git merge <remotename>/<remote-branchname> 或 git rebase <remotename>/<remote-branchname>
#或者
git pull [-r|--rebase] [-p|--prune] <remotename> <remote-branchname>:<local-branchname>
2）所有分支：git fetch --all 或 git pull [-r|--rebase] --all


16、分支的变基（一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁）
1）实施方案：
git checkout experiment
git rebase master
git checkout master
git merge experiment


17、GitHub使用
1）开放推送权限：进入仓库——》Settings——》Collaborators——》添加合作者
2）


